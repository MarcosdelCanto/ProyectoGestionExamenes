#!/bin/bash

# --- Configuraci√≥n (AJUSTA ESTAS VARIABLES) ---
EC2_USER="linuxuser"
EC2_HOST="64.176.16.195"
EC2_PROJECT_PATH="/home/${EC2_USER}/ProyectoGestionExamenes" # Ruta confirmada donde est√° tu repo en EC2
DOCKER_HUB_USERNAME="micobo" # <--- ¬°AJUSTA con tu nombre de usuario de Docker Hub!

# --- Paso 1: Pedir la contrase√±a de EC2 ---
# (Se usa 'read -s' para que la contrase√±a no se muestre en pantalla)
read -s -p "Introduce la contrase√±a para ${EC2_USER}@${EC2_HOST}: " EC2_PASSWORD
echo # Para una nueva l√≠nea despu√©s de la contrase√±a oculta

# --- Paso 2: Preparar la wallet en el servidor EC2 ---
# Nota: Esto asume que tienes la carpeta 'wallet' en la ra√≠z de tu proyecto local.
# Si 'sshpass' no est√° instalado en tu sistema local, el script te lo indicar√°.
# Puedes instalarlo en Ubuntu/Debian con: sudo apt-get install sshpass
echo "üîµ Paso 2: Copiando la carpeta wallet al servidor EC2..."
sshpass -p "$EC2_PASSWORD" scp -r ./wallet "${EC2_USER}"@"${EC2_HOST}":"${EC2_PROJECT_PATH}"/

if [ $? -ne 0 ]; then
    echo "‚ùå Error: Fall√≥ la copia de la wallet a EC2. Aseg√∫rate de que 'sshpass' est√© instalado y que la contrase√±a sea correcta."
    exit 1
fi
echo "‚úÖ Wallet copiada exitosamente a EC2."

# --- Paso 3: Iniciar sesi√≥n en Docker Hub (local) ---
echo "üîµ Paso 3: Iniciando sesi√≥n en Docker Hub..."
docker login -u "${DOCKER_HUB_USERNAME}"

if [ $? -ne 0 ]; then
    echo "‚ùå Error: Fall√≥ el inicio de sesi√≥n en Docker Hub. Revisa tus credenciales de Docker Hub."
    exit 1
fi
echo "‚úÖ Sesi√≥n iniciada en Docker Hub."

# --- Paso 4: Construir y Subir im√°genes Docker (local) ---
echo "üîµ Paso 4: Construyendo y subiendo imagen del Backend..."
# Aseg√∫rate de que la ruta './ProyectoGestionExamenes/backend' sea correcta desde donde ejecutas el script.
docker build -t "${DOCKER_HUB_USERNAME}"/proyectogestionexamenes-backend:latest ./ProyectoGestionExamenes/backend
if [ $? -ne 0 ]; then echo "‚ùå Error: Fall√≥ la construcci√≥n del Backend."; exit 1; fi
docker push "${DOCKER_HUB_USERNAME}"/proyectogestionexamenes-backend:latest
if [ $? -ne 0 ]; then echo "‚ùå Error: Fall√≥ el push del Backend."; exit 1; fi
echo "‚úÖ Imagen de Backend subida."

echo "üîµ Construyendo y subiendo imagen del Frontend..."
# Aseg√∫rate de que la ruta './ProyectoGestionExamenes/frontend' sea correcta desde donde ejecutas el script.
docker build -t "${D_H_USERNAME}"/proyectogestionexamenes-frontend:latest ./ProyectoGestionExamenes/frontend
if [ $? -ne 0 ]; then echo "‚ùå Error: Fall√≥ la construcci√≥n del Frontend."; exit 1; fi
docker push "${D_H_USERNAME}"/proyectogestionexamenes-frontend:latest
if [ $? -ne 0 ]; then echo "‚ùå Error: Fall√≥ el push del Frontend."; exit 1; fi
echo "‚úÖ Imagen de Frontend subida."

# --- Paso 5: Desplegar en el servidor EC2 (v√≠a SSH) ---
echo "üîµ Paso 5: Conectando a EC2 y desplegando la aplicaci√≥n..."
sshpass -p "$EC2_PASSWORD" ssh "${EC2_USER}"@"${EC2_HOST}" << EOF
    echo "Navegando al directorio del proyecto: ${EC2_PROJECT_PATH}"
    # '|| { ...; exit 1; }' es para salir si el 'cd' falla (ej. ruta incorrecta)
    cd "${EC2_PROJECT_PATH}" || { echo "‚ùå Error: No se pudo navegar al directorio del proyecto en EC2. Revisa la variable EC2_PROJECT_PATH en el script."; exit 1; }

    echo "Descargando im√°genes actualizadas desde Docker Hub..."
    docker compose pull

    echo "Reiniciando contenedores..."
    docker compose down
    docker compose up -d --force-recreate

    echo "Limpiando im√°genes Docker antiguas..."
    docker image prune -f

    echo "‚úÖ Despliegue completado en EC2."
EOF

if [ $? -ne 0 ]; then
    echo "‚ùå Error: Fall√≥ el despliegue en EC2. Revisa los mensajes anteriores y los logs de SSH."
    exit 1
fi

echo "üéâ ¬°Script de despliegue manual completado exitosamente!"

// controllers/auth.controller.js
import oracledb from 'oracledb';
import { getConnection } from '../db.js';
import bcrypt from 'bcrypt';
import crypto from 'cr      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #ffffff;">
          <div style="text-align: center; margin-bottom: 30px; background-color: #003d7a; padding: 20px; border-radius: 10px;">
            <img src="https://www.duoc.cl/wp-content/uploads/2023/02/duoc-uc-logo.png" 
                 alt="Duoc UC" 
                 style="max-width: 200px; height: auto; display: block; margin: 0 auto;"
                 width="200">
            <div style="color: white; font-size: 18px; font-weight: bold; margin-top: 10px;">
              Sistema de Gestión de Exámenes Transversales
            </div>
          </div>

          <h2 style="color: #003d7a; text-align: center; margin-bottom: 30px;">Recuperación de Contraseña</h2>

          <p style="font-size: 16px; line-height: 1.6;">Hola <strong>${usuario.NOMBRE_USUARIO}</strong>,</p>

          <p style="font-size: 16px; line-height: 1.6;">Recibimos una solicitud para restablecer la contraseña de tu cuenta en el Sistema de Gestión de Exámenes Transversales.</p>`rt nodemailer from 'nodemailer';
import {
  generateAccessToken,
  generateRefreshToken,
  verifyRefreshToken,
} from '../utils/jwt.utils.js';

let refreshTokens = []; // En memoria; en producción guárdalos en BD
let resetTokens = []; // Tokens de recuperación temporal

// Configuración del transporter de nodemailer
const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.EMAIL_USER || 'info@examenestransversales.cl',
    pass: process.env.EMAIL_PASSWORD, // Contraseña de aplicación de Google
  },
  tls: {
    rejectUnauthorized: false,
  },
  debug: process.env.NODE_ENV === 'development', // Para debugging
  logger: process.env.NODE_ENV === 'development',
});

export const login = async (req, res) => {
  const { email_usuario, password_usuario } = req.body;

  if (!email_usuario || !password_usuario) {
    return res
      .status(400)
      .json({ mensaje: 'Email y contraseña son obligatorios.' });
  }

  let conn;
  try {
    conn = await getConnection();
    const result = await conn.execute(
      `SELECT
         u.id_usuario, u.nombre_usuario, u.password_usuario AS hash, u.ROL_id_rol, r.NOMBRE_ROL
       FROM USUARIO U
       JOIN ROL R ON U.ROL_ID_ROL = R.id_rol
       WHERE email_usuario = :email_usuario`,
      { email_usuario },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ mensaje: 'Credenciales inválidas.' });
    }

    const row = result.rows[0];
    const { ID_USUARIO, NOMBRE_USUARIO, HASH, ROL_ID_ROL, NOMBRE_ROL } = row;

    const coincide = await bcrypt.compare(password_usuario, HASH);

    if (!coincide) {
      return res.status(401).json({ mensaje: 'Credenciales inválidas.' });
    }

    // Generar tokens
    const payload = {
      id_usuario: ID_USUARIO,
      nombre_usuario: NOMBRE_USUARIO,
      rol_id_rol: ROL_ID_ROL,
      nombre_rol: NOMBRE_ROL,
    };
    const accessToken = generateAccessToken(payload);
    const refreshToken = generateRefreshToken(payload);

    // Guardar refresh token en memoria
    refreshTokens.push(refreshToken);

    // Devolver ambos tokens y datos de usuario
    return res.status(200).json({
      mensaje: 'Login exitoso.',
      accessToken,
      refreshToken,
      usuario: {
        id_usuario: ID_USUARIO,
        nombre_usuario: NOMBRE_USUARIO,
        email_usuario,
        ROL_ID_ROL,
        rol_id_rol: ROL_ID_ROL,
        nombre_rol: NOMBRE_ROL,
        rol: NOMBRE_ROL,
      },
    });
  } catch (err) {
    console.error('Error en login:', err);
    return res.status(500).json({ mensaje: 'Error del servidor.' });
  } finally {
    if (conn) {
      try {
        await conn.close();
      } catch (e) {
        console.error('Error cerrando conexión:', e);
      }
    }
  }
};

// Función para solicitar recuperación de contraseña
export const forgotPassword = async (req, res) => {
  const { email_usuario } = req.body;

  if (!email_usuario) {
    return res.status(400).json({
      mensaje: 'El correo electrónico es obligatorio.',
    });
  }

  let conn;
  try {
    conn = await getConnection();

    // Verificar si el usuario existe
    const result = await conn.execute(
      `SELECT id_usuario, nombre_usuario, email_usuario
       FROM USUARIO
       WHERE email_usuario = :email_usuario`,
      { email_usuario },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    if (result.rows.length === 0) {
      // Por seguridad, no revelamos si el email existe o no
      return res.status(200).json({
        mensaje: 'Si el correo existe, recibirás un enlace de recuperación.',
      });
    }

    const usuario = result.rows[0];

    // Generar token de recuperación
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hora

    // Guardar token en memoria (en producción usar BD)
    resetTokens.push({
      email: email_usuario,
      token: resetToken,
      expiry: resetTokenExpiry,
      userId: usuario.ID_USUARIO,
    });

    // Crear enlace de recuperación
    const resetLink = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password?token=${resetToken}`;

    // Configurar el email
    const mailOptions = {
      from: 'info@examenestransversales.cl',
      to: email_usuario,
      subject: 'Recuperación de Contraseña - Sistema de Gestión de Exámenes',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <img src="https://www.duoc.cl/wp-content/uploads/2023/02/duoc-uc-logo.png" alt="Duoc UC" style="max-width: 200px;">
          </div>

          <h2 style="color: #003d7a; text-align: center;">Recuperación de Contraseña</h2>

          <p>Hola <strong>${usuario.NOMBRE_USUARIO}</strong>,</p>

          <p>Recibimos una solicitud para restablecer la contraseña de tu cuenta en el Sistema de Gestión de Exámenes Transversales.</p>

          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetLink}"
               style="background-color: #003d7a; color: white; padding: 12px 24px;
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              Restablecer Contraseña
            </a>
          </div>

          <p><strong>Este enlace expirará en 1 hora.</strong></p>

          <p>Si no solicitaste este cambio, puedes ignorar este correo. Tu contraseña no será modificada.</p>

          <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">

          <p style="color: #666; font-size: 12px; text-align: center;">
            Este correo fue enviado automáticamente por el Sistema de Gestión de Exámenes Transversales.<br>
            Administrado por examenestransversales.cl
          </p>
        </div>
      `,
    };

    // Enviar email
    await transporter.sendMail(mailOptions);

    return res.status(200).json({
      mensaje: 'Si el correo existe, recibirás un enlace de recuperación.',
    });
  } catch (err) {
    console.error('Error en forgotPassword:', err);
    return res.status(500).json({
      mensaje: 'Error al procesar la solicitud.',
    });
  } finally {
    if (conn) {
      try {
        await conn.close();
      } catch (e) {
        console.error('Error cerrando conexión:', e);
      }
    }
  }
};

// Función para verificar token de recuperación
export const verifyResetToken = async (req, res) => {
  const { token } = req.params;

  const resetEntry = resetTokens.find(
    (entry) => entry.token === token && entry.expiry > new Date()
  );

  if (!resetEntry) {
    return res.status(400).json({
      mensaje: 'Token inválido o expirado.',
    });
  }

  return res.status(200).json({
    mensaje: 'Token válido.',
    email: resetEntry.email,
  });
};

// Función para restablecer contraseña
export const resetPassword = async (req, res) => {
  const { token, nuevaPassword } = req.body;

  if (!token || !nuevaPassword) {
    return res.status(400).json({
      mensaje: 'Token y nueva contraseña son obligatorios.',
    });
  }

  if (nuevaPassword.length < 6) {
    return res.status(400).json({
      mensaje: 'La contraseña debe tener al menos 6 caracteres.',
    });
  }

  // Verificar token
  const resetEntryIndex = resetTokens.findIndex(
    (entry) => entry.token === token && entry.expiry > new Date()
  );

  if (resetEntryIndex === -1) {
    return res.status(400).json({
      mensaje: 'Token inválido o expirado.',
    });
  }

  const resetEntry = resetTokens[resetEntryIndex];

  let conn;
  try {
    conn = await getConnection();

    // Hashear nueva contraseña
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(nuevaPassword, saltRounds);

    // Actualizar contraseña en la base de datos
    await conn.execute(
      `UPDATE USUARIO
       SET password_usuario = :hashedPassword
       WHERE id_usuario = :userId`,
      {
        hashedPassword,
        userId: resetEntry.userId,
      },
      { autoCommit: true }
    );

    // Eliminar token usado
    resetTokens.splice(resetEntryIndex, 1);

    // Enviar email de confirmación
    const mailOptions = {
      from: 'info@examenestransversales.cl',
      to: resetEntry.email,
      subject: 'Contraseña Actualizada - Sistema de Gestión de Exámenes',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <img src="https://www.duoc.cl/wp-content/uploads/2023/02/duoc-uc-logo.png" alt="Duoc UC" style="max-width: 200px;">
          </div>

          <h2 style="color: #28a745; text-align: center;">Contraseña Actualizada Exitosamente</h2>

          <p>Tu contraseña ha sido actualizada correctamente en el Sistema de Gestión de Exámenes Transversales.</p>

          <p>Ya puedes iniciar sesión con tu nueva contraseña.</p>

          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/login"
               style="background-color: #28a745; color: white; padding: 12px 24px;
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              Iniciar Sesión
            </a>
          </div>

          <p style="color: #dc3545;"><strong>Si no realizaste este cambio, contacta inmediatamente al administrador del sistema.</strong></p>

          <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">

          <p style="color: #666; font-size: 12px; text-align: center;">
            Este correo fue enviado automáticamente por el Sistema de Gestión de Exámenes Transversales.<br>
            Administrado por examenestransversales.cl
          </p>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);

    return res.status(200).json({
      mensaje: 'Contraseña actualizada correctamente.',
    });
  } catch (err) {
    console.error('Error en resetPassword:', err);
    return res.status(500).json({
      mensaje: 'Error al actualizar la contraseña.',
    });
  } finally {
    if (conn) {
      try {
        await conn.close();
      } catch (e) {
        console.error('Error cerrando conexión:', e);
      }
    }
  }
};

// Manejar refresh token
export const handleRefreshToken = (req, res) => {
  const { token } = req.body;
  if (!token || !refreshTokens.includes(token)) {
    return res.status(401).json({ mensaje: 'Refresh token inválido.' });
  }

  try {
    const payload = verifyRefreshToken(token);
    const newAccessToken = generateAccessToken({
      id_usuario: payload.id_usuario,
      nombre_usuario: payload.nombre_usuario,
      rol_id_rol: payload.rol_id_rol,
      nombre_rol: payload.nombre_rol,
    });
    return res.json({ accessToken: newAccessToken });
  } catch (err) {
    return res.status(401).json({ mensaje: 'Refresh token expirado.', err });
  }
};

// Logout
export const logout = (req, res) => {
  const { token } = req.body;
  refreshTokens = refreshTokens.filter((t) => t !== token);
  return res.sendStatus(204);
};
